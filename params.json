{"name":"StoreBox","tagline":"Android library for streamlining SharedPreferences","body":"##Introduction##\r\nWhen getting a value from any preferences, whether private Activity or default shared preferences, you would normally have to get a reference to a ```SharedPreferences``` instance, for example using\r\n```Java\r\nSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(someContext);\r\n```\r\nOnly after that we can start getting/saving the values, such as\r\n```Java\r\nString username = prefs.getString(\"username\", \"\");\r\nprefs.edit().putString(\"username\", \"androiduser\").apply();\r\n```\r\nThis can get tedious if the values need to be saved and retrieved from multiple places as the caller is always required to supply the key of the preference, know under what type it is saved, and know what default should be used. This can also become error prone as more keys get used. Putting commonly accessed preferences behind a wrapper is a reasonable solution, but still requires some boilerplate code.\r\n\r\nWhat if however we could define an interface like\r\n```Java\r\npublic interface MyPreferences {\r\n    \r\n    @KeyByString(\"username\")\r\n    String getUsername();\r\n    \r\n    @KeyByString(\"username\")\r\n    void setUsername(String value);\r\n}\r\n```\r\nfor everyone to use in order to save and get values? The caller doesn't need to worry about the key, neither needs to think about what type the key should use, and the process of retrieving/saving is hidden behind a method name with improved semantics.\r\n\r\nWith StoreBox that becomes reality. Given the above interface definition you can easily create an instance using\r\n```Java\r\nMyPreferences prefs = StoreBox.create(context, MyPreferences.class);\r\n```\r\nand you will be able to retrieve/save the value just by calling the defined methods\r\n```Java\r\nString username = prefs.getUsername();\r\nprefs.setUsername(\"androiduser\");\r\n```\r\n\r\nRead on to find out more details about how StoreBox can be used and how you can add it to your Android project.\r\n\r\n##Adding to a project##\r\nStoreBox can be used in Android projects using minimum SDK version 10 and newer (Android 2.3+).\r\n###JAR###\r\n[v1.0.0 JAR](https://oss.sonatype.org/service/local/repositories/releases/content/net/orange-box/storebox/storebox-lib/1.0.0/storebox-lib-1.0.0.jar)\r\n###Gradle###\r\n```\r\ncompile 'net.orange-box.storebox:storebox-lib:1.0.0'\r\n```\r\n###Maven###\r\n```\r\n<dependency>\r\n  <groupId>net.orange-box.storebox</groupId>\r\n  <artifactId>storebox-lib</artifactId>\r\n  <version>1.0.0</version>\r\n</dependency>\r\n```\r\n\r\n##Defining an interface and bringing it to life##\r\nSimply create a new interface class in your IDE or a text editor, give it an access modifier which suits its use, and name it as appropriate.\r\n```Java\r\npublic interface MyPreferences {\r\n    \r\n}\r\n```\r\nNow you're ready to use ```StoreBox.create()``` to create an instance.\r\n```Java\r\nMyPreferences instance = StoreBox.create(context, MyPreferences.class);\r\n```\r\n\r\n##Adding get and set methods##\r\nIf you would like to add a **getter** just add a method to the interface which returns a value and make sure to annotate it using `@KeyByString` or `@KeyByResource`. Please note that for now only values which the `SharedPreferences` accept can be used (except `Set<String>` for the moment).\r\n```Java\r\n@KeyByString(\"my_string\")\r\nString getMyString();\r\n\r\n@KeyByResource(R.string.key_my_boolean)\r\nboolean getMyBoolean();\r\n```\r\nIf you try to define a method that returns something like a `Date` object, which cannot be saved by Android, an exception will be thrown.\r\n```Java\r\n@KeyByString(\"some_key\")\r\nDate willNotWork(); // invalid\r\n```\r\n\r\nAdding a **setter** is just as easy. The same annotations will need to be used as for getter methods, but now our method will return a `Void` type and will have to provide a parameter for supplying the value that we we would like to save.\r\n```Java\r\n@KeyByString(\"my_string\")\r\nvoid setMyString(String value)\r\n\r\n@KeyByResource(R.string.key_my_boolean)\r\nvoid setMyBoolean(boolean value)\r\n```\r\nJust like with get methods only the common types are supported, and as such the example below will not work.\r\n```Java\r\n@KeyByString(\"some_key\")\r\nvoid willNotWork(Intent value); // invalid\r\n```\r\n\r\n##Specifying defaults for get methods##\r\nThis can be achieved in two ways, through an argument or by using an annotation.\r\n\r\nFor the first option we can just do the following.\r\n```Java\r\n@KeyByString(\"some_key\")\r\nString getValue(String defValue);\r\n```\r\nBut we can also use an annotation referencing a default found in the XML resources.\r\n```Java\r\n@KeyByString(\"some_key\")\r\n@DefaultValue(R.string.some_default)\r\nString getValue();\r\n```\r\n\r\nFor some types, such as `long`, which cannot be added to the resources an integer resource may be used instead.\r\n```Java\r\n@KeyByString(\"long_key\")\r\n@DefaultValue(R.integer.integer_default)\r\nlong getValue();\r\n```\r\n\r\n##Opening different types of preferences##\r\nIn all of the examples so far we have omitted any details about what preferences are opened and how.\r\n\r\nWithout any annotation the default shared preferences will be used, but the `@DefaultSharedPreferences` annotation can be added to the interface definition for explicitness. Likewise, `@ActivityPreferences` or `@FilePreferences` can be used to respectively open preferences private to an activity or to open preferences using a file name.\r\n\r\nWe can also specify the mode with which the preferences should be opened, although this option is not supported by all the types.\r\n```Java\r\n@ActivityPreferences(mode = PreferencesMode.MULTI_PROCESS)\r\npublic interface WelcomeActivityPreferences {\r\n    \r\n    // method definitions here...\r\n}\r\n```\r\n\r\n##Advanced##\r\n###Chaining calls###\r\nWith Android's `SharedPreferences.Editor` class it is possible to keep chaining put methods as each returns back the `SharedPreferences.Editor` instance. StoreBox allows the same functionality. All that needs to be done is to change the set method definitions to either return `SharedPreferences.Editor` or the interface type itself.\r\n```Java\r\npublic interface ChainingExample {\r\n    \r\n    @KeyByString(\"key1\")\r\n    ChainingExample putValueOne(String value);\r\n    \r\n    @KeyByString(\"key2\")\r\n    SharedPreferences.Editor putValueTwo(String value);\r\n}\r\n```\r\nAnd we'll be able to chain calls\r\n```Java\r\npreferences.putValueOne(\"hello\").putValueTwo(\"world\").putStringSet(...).apply();\r\n```\r\n\r\n###Forwarding calls###\r\nIf for some reason you would like to access methods from the `SharedPreferences` or `SharedPreferences.Editor`, you can do that by extending your interface from either of the above (or even both).\r\n```Java\r\npublic interface ForwardingExample extends SharedPreferences, SharedPreferences.Editor {\r\n    \r\n    // method definitions here\r\n}\r\n```\r\nAnd you will just be able to call\r\n```Java\r\nForwardingExample prefs = // creation...\r\n\r\nString someString = prefs.getString(\"key\", \"default\");\r\nprefs.putString(\"key\", \"value\").apply();\r\n```\r\n\r\n###More control over how values get saved###\r\nChanges to preferences can normally be saved on Android either through `apply()` or `commit()`. Which method gets used can be customised in StoreBox through the use of the `@SaveOption` annotation.\r\n\r\nUnlike any of the previous annotations `@SaveOption` can be used to annotate both the interface as well as individual set methods, however an annotation at method-level will take precedence over an interface annotation.\r\n```Java\r\n@SaveOption(SaveMode.APPLY)\r\npublic interface SaveModeExample {\r\n    // key annotations omitted\r\n    \r\n    void saveOne(String value); // will save using apply()\r\n    \r\n    @SaveOption(SaveMode.COMMIT)\r\n    void saveTwo(String value); // will save using commit()\r\n}\r\n```\r\n\r\n###More control over default values###\r\nSupplying default values, either by using an argument or an annotation, has been covered earlier but there's further customisation possible.\r\n\r\nThe `@DefaultValueOption` works in a similar way to the `@SaveOption` annotation in how it can be used, but it specifies what default value should be returned in the absence of a more explicit value.\r\n```Java\r\n@DefaulltValueOption(DefaultValueMode.EMPTY)\r\npublic interface DefaultValueModeExample {\r\n    // key annotations omitted\r\n    \r\n    String getStringOne(); // will return \"\"\r\n    \r\n    @DefaultValueOption(DefaultValueMode.NULL)\r\n    String getStringTwo(); // will return null\r\n    \r\n    int getIntOne(); // will return 0\r\n    \r\n    @DefaultValueOption(DefaultValueMode.NULL)\r\n    int getIntTwo(); // will return 0 as primitive types can't hold a reference\r\n}\r\n```\r\n\r\n###Obtaining a more customised instance at run-time###\r\nAs previously described you can build an instance of your interface using `StoreBox.build()`, however if you'd like to override at run-time any annotations you can use `StoreBox.Builder` and apply different options.\r\n```Java\r\nMyPreferences prefs =\r\n        new StoreBox.Builder(context, MyPreferences.class)\r\n        .preferencesMode(PreferencesMode.MULTI_PROCESS)\r\n        .build()\r\n```\r\n\r\n###Defaults###\r\nGiven the minimum amount of details provided to the interface and method definitions through the use of StoreBox's annotations, the following defaults will get used:\r\n* Preferences type: Default shared preferences\r\n* Preferences mode: Private\r\n* Save mode: Apply\r\n* Default value mode: Empty\r\n\r\n##License##\r\n```\r\nCopyright 2015 Martin Bella\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n```\r\n","google":"UA-33402302-4","note":"Don't delete this file! It's used internally to help with page regeneration."}